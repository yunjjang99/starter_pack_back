services:
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/dockerfile.backend
    container_name: backend
    ports:
      - "7778:7778"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - IS_DEV=${IS_DEV}
      - JWT_SECRET=${JWT_SECRET}
      - BACKEND_PORT=${BACKEND_PORT}
    depends_on:
      mysql:
        condition: service_healthy  # mysql 서비스가 healthy 상태가 되면 backend 실행
    networks:
      - mynetwork
    restart: on-failure

  mysql:
    build:
      context: ./  # docker-compose.yml 파일이 위치한 폴더
      dockerfile: ./dockerfile.mysql
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    ports:
      - "6654:3306"  # 외부에서는 6654 포트로 접근하고, 내부적으로는 env파일에서 구성한 3306 포트 사용
    volumes:
      - db_data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/my.cnf
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:  # MySQL이 준비 상태인지 확인하는 헬스체크
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 30s  # 헬스체크 주기
      timeout: 10s   # 헬스체크 제한 시간
      retries: 5     # 헬스체크 실패 시 재시도 횟수
      start_period: 40s  # 초기 헬스체크를 시작하기 전 대기 시간
    networks:
      - mynetwork

volumes:
  db_data:

networks:
  mynetwork:
    driver: bridge
